# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -*- coding: utf-8 -*-
#
import os

# import sys
# sys.path.insert(0, os.path.abspath('.'))


# -- Project information -----------------------------------------------------

project = 'CarsonDoc'
copyright = '2019, Carson'
author = 'Carson'

# The short X.Y version
version = ''
# The full version, including alpha/beta/rc tags
release = '0.0.0'

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.todo',
    'sphinx.ext.githubpages',
    'sphinx.ext.mathjax',
    'sphinxcontrib.plantuml',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
# exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {"style_nav_header_background": "#000000bd"}

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}

# ---sphinx-themes-----
html_theme = 'sphinx_rtd_theme'  # that will find "html_theme_path/html_theme". i.e. _templates/sphinx_minoo_theme
# import sphinx_minoo_theme

import sphinx_rtd_theme
extensions.append("sphinx_rtd_theme")

# html_theme_path = [sphinx_minoo_theme.get_html_theme_path()]  # default path
# print(f'html_theme_path:{html_theme_path}')
html_theme_path = ["_templates"]  # from {default_path} copy to ./_templates/{html_theme}

if 'Carson':
    # Add any paths that contain custom static files (such as style sheets) here,
    # relative to this directory. They are copied after the builtin static files,
    # so a file named "default.css" will overwrite the builtin "default.css".
    html_static_path = ['_static']


    def setup(app):
        app.add_stylesheet("css/Carson.css")
        # app.add_stylesheet("css/themes/minoo.Page.css")
        app.add_stylesheet("css/themes/rtd.Page.css")


    if 'global variable setting':
        variable_list = [f'.. |MainAuthor| replace:: {author}',
                         f'.. |cur_date| date:: %Y-%m-%d',
                         f'.. include:: {os.path.dirname(__file__)}/_templates/CSS_DECLARE/color.dc_css',
                         ]
        rst_epilog = '\n'.join(variable_list) + '\n'
        # print(rst_epilog)

    html_show_sourcelink = False  # Close the page will have the function of linking to the original rst file.

    plantuml = 'java -jar {0}'.format(os.path.join(os.environ["USERPROFILE"], 'plantuml.jar'))

    if 'localization':
        locale_dirs = ['locale/']  # path is example but recommended.
        gettext_compact = False  # optional.
